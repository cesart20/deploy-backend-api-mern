openapi: 3.0.0
info:
  title: API para Gestión de Publicaciones y Usuarios
  description: API para manejar publicaciones y usuarios con autenticación JWT.
  version: 1.0.0
servers:
  - url: http://localhost:4000/api
    description: Servidor local de desarrollo

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          description: Email of the user.
        password:
          type: string
          description: Password of the user.

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token returned after successful login.

    Post:
      type: object
      properties:
        user:
          type: string
          description: ID of the user who created the post.
        _id:
          type: string
          description: Unique identifier for the post.
        title:
          type: string
          description: Title of the post.
        body:
          type: string
          description: Body content of the post.
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp.
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp.

paths:
  /api/users/register:
    post:
      tags:
        - Usuarios
      summary: Register a new user
      description: Create a new user by providing email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User registered successfully.
        400:
          description: Bad request, invalid data.

  /api/users/login:
    post:
      tags:
        - Usuarios
      summary: Login an existing user
      description: Login by providing email and password to receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Login successful, returns a JWT token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Bad request, invalid data.
        401:
          description: Unauthorized, incorrect credentials.

  /api/posts:
    get:
      tags:
        - Publicaciones
      summary: Retrieve all posts
      description: Fetch a list of all posts.
      responses:
        200:
          description: A list of all posts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'

    post:
      tags:
        - Publicaciones
      summary: Create a new post
      description: Add a new post for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: POST created successfully.
        400:
          description: Bad request, missing fields.
        401:
          description: Unauthorized, token required.

  /api/posts/user:
    get:
      tags:
        - Publicaciones
      summary: Retrieve posts for the authenticated user
      description: Fetch posts associated with the authenticated user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of posts by the authenticated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userPosts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  email:
                    type: string
                    description: Email of the user.

  /api/posts/{id}:
    put:
      tags:
        - Publicaciones
      summary: Update an existing post
      description: Update a post by providing its ID and new data.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to be updated.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: POST updated successfully.
        400:
          description: Bad request, invalid data.
        401:
          description: Unauthorized, token required.
        404:
          description: Post not found.

    delete:
      tags:
        - Publicaciones
      summary: Delete a post
      description: Delete a post by providing its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to be deleted.
          schema:
            type: string
      responses:
        200:
          description: POST deleted successfully.
        400:
          description: Bad request, invalid data.
        401:
          description: Unauthorized, token required.
        404:
          description: Post not found.
